#!/usr/bin/env bash

# shellckeck source=deploy_defines
# source deploy_defines regardless of startingpoint
DIR="${BASH_SOURCE%/*}"
if [[ ! -d "$DIR" ]]; then DIR="$PWD"; fi
. "$DIR/deploy_defines" || { echo "Could not source deploy_defines script. This is needed for correct execution. Exiting!"; exit; }

add_sub_repositories_and_commit () {
    # checkout a base for defined starting point
    cd "$base_dir" || { echo "Could not go to base dir of control.ros.org. Exiting!"; exit "$ERRCODE"; }
    git checkout "$base_branch" || { echo "Exiting!"; exit "$ERRCODE"; }

    #  for each branch from multi version, checkout branch, clone sub repositories with docs add as tmp commit and remove
    for branch in "${!branch_version[@]}";
        do echo "Switch to branch: $branch.  - With version:${branch_version[$branch]}";
        git checkout "$branch"
        # change .gitignore, needed to include subrepositorie. sed matches doc/ros2_control*, so all subrepositorie are excluded
        sed -i "s/doc\/ros2_control/\#doc\/ros2_control/g" .gitignore
<<<<<<< HEAD
        # clone all subrepositorie and add as tmp commit to branch of multi version
=======
        sed -i "s/doc\/gz_ros2_control/\#doc\/gz_ros2_control/g" .gitignore
        sed -i "s/doc\/gazebo_ros2_control/\#doc\/gazebo_ros2_control/g" .gitignore
        # clone all subrepositories and add as tmp commit to branch of multi version
>>>>>>> 5dfd401 (Fix workflows for PRs (#135))
        echo "Clone repositories for $branch and checkout ${branch_version[$branch]}"
        for repo_name in "${!subrepo_url[@]}";
            do echo "Create doc/$repo_name";
                git clone "${subrepo_url[$repo_name]}" -b "${branch_version[$branch]}" doc/"$repo_name"
                cd doc/"$repo_name" || { echo "Could not clone $repo_name to doc/ directory. Exiting!"; exit "$ERRCODE"; }
                # remove git repo so that doc files of subrepo can be added to tmp commit
                rm -rf .git/
                cd ../../
        done
        git add .
        git commit -m "Add temporary changes for multi version"
        git checkout "$base_branch"
        # remove left over folders if existing
        for repo_name in "${!subrepo_url[@]}";
            do rm -rf doc/"$repo_name";
        done
    done
}

add_sub_repositories_and_commit
